generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String             @id @unique @default(uuid()) @db.Uuid
  name      String
  email     String             @unique
  roles     String[]
  password  String
  createdAt DateTime           @default(now()) @map(name: "created_at")
  updatedAt DateTime           @updatedAt @map(name: "updated_at")
  notifications Notification[] @relation("notifs_by_user")
  comments      Comment[]      @relation("comments_by_user")
  projects      Project[]
  tasks         Task[]
}

model Comment {
  id            String    @id @unique @default(uuid()) @db.Uuid
  comment       String
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  task          Task      @relation("comments_by_task", fields: [taskID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  taskID        String    @db.Uuid
  user          User      @relation("comments_by_user", fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userID        String    @db.Uuid
}

model Document {
  id            String    @id @unique @default(uuid()) @db.Uuid
  name          String
  size          Int
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  task          Task      @relation("documents_by_task", fields: [taskID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  taskID        String    @db.Uuid
}

model Notification {
  id            String    @id @unique @default(uuid()) @db.Uuid
  description   String
  isRead        Boolean
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  user          User      @relation("notifs_by_user", fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userID        String    @db.Uuid
}

model Project {
  id            String    @id @unique @default(uuid()) @db.Uuid
  name          String
  description   String    @db.Text
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  tasks         Task[]    @relation("tasks_by_projet")
  users         User[]
}

model Task {
  id                    String     @id @unique @default(uuid()) @db.Uuid
  subject               String
  status                String
  dueDate               String     @map(name: "due_date")
  initialSpentTime      Int        @map(name: "initial_spent_time")
  additionalSpentTime   Int[]      @map(name: "additional_spent_time")
  advancement           Int
  createdAt             DateTime   @default(now()) @map(name: "created_at")
  updatedAt             DateTime   @updatedAt @map(name: "updated_at")
  documents             Document[] @relation("documents_by_task")
  comments              Comment[]  @relation("comments_by_task")
  project               Project    @relation("tasks_by_projet", fields: [projectID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectID             String     @db.Uuid
  users                 User[]
}
